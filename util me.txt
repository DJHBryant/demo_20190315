package com.netgate.util.hxbank;

import com.netgate.util.JsonUtils;
import com.netgate.util.MD5;
import net.sf.json.JSONObject;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.ArrayUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.*;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Map;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;


/**
 * @author tanghf
 * @className com.netgate.util.hxbank.HxBankUtil.java
 * @createTime 2019/7/15 14:31
 */
public class HxBankUtil {

    private ReqMsg reqMsg;
    private RespMsg respMsg;

    public void sendMsg(String url, Map<String, Object> bodyMap) throws IOException {

        //1.拼装ReqMsg报文对象
        CreateReqMsg(bodyMap);
        //2.发送HTTP请求
        //System.out.println(url);
        String response = doPostQueryCmdJson(url, reqMsg.toString());
        System.out.println("响应字符串---------------------------"+response);
        //3.解析应答获得RespMsg报文对象
        AnalysisRespMsg(response);
    }


    private void CreateReqMsg(Map<String, Object> bodyMap) {
        // 私钥字符串: 密钥生成参照 RSAUtil.java
        String privateString = HxBankConstant.privateString;
        // 私钥
        PrivateKey privateKey = restorePrivateKey(Base64.decodeBase64(privateString));

        // 公钥字符串: 密钥生成参照 RSAUtil.java
        String publicKeyString = HxBankConstant.publicStr;
        // 公钥
        PublicKey publicKey = restorePublicKey(Base64.decodeBase64(publicKeyString));

        // 报文体字符串
        String bodyStr = "";
        if (reqMsg == null){
            reqMsg = new ReqMsg();
        }
        //body数据加密
        if (bodyMap.isEmpty()){
            reqMsg.setBody(encodeData(publicKey, bodyStr));
            reqMsg.getHeader().setSignData(signData(reqMsg,privateKey,publicKey));
            System.out.print("-------------------请求报文------------------");
            System.out.println(reqMsg);
        }
        //String bodyStr = JsonUtils.toJSONString(bodyMap);
    }

    private void AnalysisRespMsg(String responseMsg) {
        // 私钥字符串: 密钥生成参照 RSAUtil.java
        String privateString = HxBankConstant.privateString;
        // 私钥
        PrivateKey privateKey = restorePrivateKey(Base64.decodeBase64(privateString));

        // 公钥字符串: 密钥生成参照 RSAUtil.java
        String publicKeyString = HxBankConstant.publicStr;
        // 公钥
        PublicKey publicKey = restorePublicKey(Base64.decodeBase64(publicKeyString));

        // 报文体字符串
        String bodyStr = "";
        if (respMsg == null){
            respMsg = new RespMsg();
        }
        JSONObject responseMsgJsonObj = JSONObject.fromObject(responseMsg);
        respMsg = (RespMsg)JSONObject.toBean(responseMsgJsonObj, RespMsg.class);
        String signData = deSignData(respMsg, privateKey, publicKey);
        respMsg.getHeader().setSignData(signData);
        String bodystr = respMsg.getBody();
        String bodyData =
                decodeData(privateKey, bodystr);
        respMsg.setBody(bodyData);
        //respMsg.setBodyData(JsonUtils.toHashMap(bodyData));
        System.out.print("-------------------响应报文------------------");
        System.out.println(reqMsg);
    }

    /**
     * 签名
     */
    public String signData(ReqMsg reqMsg, PrivateKey privateKey, PublicKey publicKey){
        String publicKeyString = HxBankConstant.publicStr;
        String privateString = HxBankConstant.privateString;
        if(privateKey==null || publicKey==null)
        {
            try {
                privateKey = restorePrivateKey(Base64.decodeBase64(privateString));
                publicKey = restorePublicKey(Base64.decodeBase64(publicKeyString));
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        try {
            //1.组装待签名报文 MD5(加密后的body+requestId+requestTime)
            String md5 = MD5(reqMsg.getBody() + reqMsg.getHeader().getRequestId() + reqMsg.getHeader().getRequestTime());
            //2.究竟用什么私钥签名？
            byte[] bytes = md5.getBytes(HxBankConstant.charSet);
//            Signature sha1withRSA = Signature.getInstance("SHA1withRSA");
//            sha1withRSA.initSign(getPrivateKey(HxBankConstant.privateString));
//            sha1withRSA.update(bytes);
            long startTime = System.currentTimeMillis();
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, privateKey);
            byte[] encodedText = cipher.doFinal(bytes);
            //私钥签名后的数据
            String signData = byteArrayToHexString(encodedText);//报文头前面256位的私钥签名后的结果privateResult
            System.out.println("签名耗时: " + (System.currentTimeMillis()-startTime));
            // BASE64编码
            signData = Base64.encodeBase64String(signData.getBytes(HxBankConstant.charSet));
            return signData;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return "sign error";
    }

    /**
     * 验签
     */
    public String deSignData(RespMsg respMsg,PrivateKey privateKey, PublicKey publicKey){
        String publicKeyString = HxBankConstant.publicStr;
        String privateString = HxBankConstant.privateString;
        if(privateKey==null || publicKey==null)
        {
            try {
                privateKey = restorePrivateKey(Base64.decodeBase64(privateString));
                publicKey = restorePublicKey(Base64.decodeBase64(publicKeyString));
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        try {
            // 组装待验证原文：body+requestId+responseId+responseTime+errorCode+errorMsg
            String originData = respMsg.getBody()+respMsg.getHeader().getRequestId()+respMsg.getHeader().getResponseId();
            // 组装待验证原文MD5加密
            originData = MD5(originData);
            // 获取请求报文头header里的签名数据signData
            String signData = respMsg.getHeader().getSignData().toString();
            // 对signData进行Base64解密
            signData = new String(Base64.decodeBase64(signData.getBytes(HxBankConstant.charSet)));
            // RSA验签
            // 需要自行比对验签解析完的MD5值 跟 组装待验证原文MD5做比对，一致表示验签成功，本案例不做校验
            String signDataRsaDecode = RSADecode(publicKey, hexStringToByte(signData));
            if(signDataRsaDecode==null || signData==null || originData==null) {
                System.out.println("RSA解密失败！！ ");
                return null;
            }
            if(signDataRsaDecode.equals(originData)){
                System.out.println("验签成功");
                return signDataRsaDecode;
            }else{
                System.out.println("验签失败");
                return "sign error";
            }
            /*// BASE64解码并AES解密
            bodyStr = RSAUtil.decodeData(privateKey, bodyStr);
            // 替换原有body内容
            responseMsgJsonObj.put("body", bodyStr);*/
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 签名方法
     *
     * @param key
     * @param plainText
     * @return
     */
    public static byte[] RSAEncode(PrivateKey key, byte[] plainText) {

        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            return cipher.doFinal(plainText);
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;

    }

    /**
     *验签方法
     *
     * @param key
     * @param encodedText
     * @return
     */
    public static String RSADecode(PublicKey key, byte[] encodedText) {

        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE, key);
            return new String(cipher.doFinal(encodedText));
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (BadPaddingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;

    }


    /**
     * 公钥，X509EncodedKeySpec 用于构建公钥的规范
     *
     * @param keyBytes
     * @return
     */
    public static PublicKey restorePublicKey(byte[] keyBytes) {
        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(keyBytes);

        try {
            KeyFactory factory = KeyFactory.getInstance("RSA");
            PublicKey publicKey = factory.generatePublic(x509EncodedKeySpec);
            return publicKey;
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 私钥，PKCS8EncodedKeySpec 用于构建私钥的规范
     *
     * @param keyBytes
     * @return
     */
    public static PrivateKey restorePrivateKey(byte[] keyBytes) {

        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
                keyBytes);

        KeyFactory factory;
        try {
            factory = KeyFactory.getInstance("RSA");
            PrivateKey privateKey = factory
                    .generatePrivate(pkcs8EncodedKeySpec);
            return privateKey;
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }


        return null;
    }


    //MD5 加密
    public String MD5(String s) throws NoSuchAlgorithmException {
        char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        //1.字符转成字节数组，byte占8位
        byte[] bytes = s.getBytes();
        //2.获得 MD5 摘要算法的 MessageDigest 对象
        MessageDigest mdInst = MessageDigest.getInstance("MD5");
        //3.更新字节数组
        mdInst.update(bytes);
        //4.获得摘要算法值
        byte[] digest = mdInst.digest();
        //5.将字节数组转化成十六进制的字符串，Java中用补码表示二进制{正数不变，负数除最高位，其余取反，加一}
        char[] chars = new char[digest.length * 2];
        int k = 0;
        for (int i=0; i<digest.length; i++){
            byte b = digest[i];
            chars[k++] = hexDigits[b >>> 4 & 0xf];
            chars[k++] = hexDigits[b & 0xf];
        }
        return new String(chars);
    }

    public String doPostQueryCmdJson(String url, String json) throws IOException {
        //1.创建HttpClient和httpResponse
        CloseableHttpClient httpClient = HttpClients.createDefault();
        CloseableHttpResponse httpResponse = null;
        //2.创建http请求，设置url和entity
        HttpPost httpPost = new HttpPost(url);
        // 实体
        StringEntity entity = new StringEntity(json);
        entity.setContentEncoding(HxBankConstant.charSet);
        entity.setContentType("application/json");
        httpPost.setEntity(entity);
        // 配置
        RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(5000).setConnectTimeout(5000).build();
        httpPost.setConfig(requestConfig);
        //3.http请求
        httpResponse = httpClient.execute(httpPost);
        //4.解析http返回
        HttpEntity responseEntity = httpResponse.getEntity();
        if (responseEntity != null) {
            String result = EntityUtils.toString(responseEntity);
            EntityUtils.consume(responseEntity);
            return result;
        }
        return "http error";
    }


    // 将字节数组转换为十六进制字符串
    public static String byteArrayToHexString(byte[] bytearray) {
        String strDigest = "";
        for (int i = 0; i < bytearray.length; i++)
        {
            strDigest += MD5.byteHEX(bytearray[i]);
        }
        return strDigest;
    }

    // 将字节转换为十六进制字符串
    @Deprecated
    private static String byteToHexString(byte ib) {
        char[] Digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
                'B', 'C', 'D', 'E', 'F' };
        char[] ob = new char[2];
        ob[0] = Digit[(ib >>> 4) & 0X0F];
        ob[1] = Digit[ib & 0X0F];
        String s = new String(ob);
        return s;
    }

    //16进制字符串转为字节数组
    public static byte[] hexStringToByte(String hex){
        int len = (hex.length()/2);
        byte[] result = new byte[len];
        char[] achar=hex.toCharArray();
        for(int i=0;i<len;i++){
            int pos=i*2;
            result[i]=(byte)(toByte(achar[pos])<<4|toByte(achar[pos+1]));
        }
        return result;
    }

    public static int toByte(char c){
        byte b=(byte)"0123456789ABCDEF".indexOf(c);
        return b;
    }

    /*
       加密数据
    */
    public static String encodeData(PublicKey publicKey,String originData){
        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.ENCRYPT_MODE,publicKey);
            byte[] bytesEncrypt = cipher.doFinal(originData.getBytes());
            //Base64编码
            byte[] bytesEncryptBase64 =  java.util.Base64.getEncoder().encode(bytesEncrypt);
            return new String(bytesEncryptBase64);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        return null;
    }
    /*
        解密数据
     */
    public  String decodeData(PrivateKey privateKey,String encodeData){
        try {
            //Base64解码
            byte[] bytesEncrypt = java.util.Base64.getDecoder().decode(encodeData);
            //加密
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE,privateKey);
            byte[] bytesDecrypt = cipher.doFinal(bytesEncrypt);
//            byte[] bytesDecrypt = cipher.doFinal(encodeData.getBytes());
            return new String(bytesDecrypt);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        return null;
    }

}
